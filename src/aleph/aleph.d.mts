/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/metadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve system metadata from the application. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, unknown>;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/statistics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * System-wide user statistics.
         * @description Get a summary of the data acessible to an anonymous user.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, unknown>;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/sitemap.xml": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a sitemap
         * @description Returns a site map for search engine robots. This lists each published collection on the current instance.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/xml": Record<string, unknown>;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/healthz": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check endpoint.
         * @description This can be used e.g. for Kubernetes health checks, but it doesn't do any internal checks.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example ok */
                            status?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/sessions/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Log in as a user
         * @description Create a session token using a username and password.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Login"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            status?: string;
                            token?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/sessions/oauth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Start OAuth authentication
         * @description Initiate a forward to the OAuth server.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Redirect */
                302: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/sessions/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Destroy the current state. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Done */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/roles/_suggest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Suggest users matching a search prefix
         * @description For a given `prefix`, suggest matching user accounts. For security reasons, the prefix must be more than three characters long.
         */
        get: {
            parameters: {
                query: {
                    prefix: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            results?: components["schemas"]["Role"][];
                        } & components["schemas"]["QueryResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/roles/code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Begin account registration
         * @description Begin validating a user email by sending a token to the address which can then be used to create an account.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RoleCodeCreate"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            status?: string;
                            token?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a user account
         * @description Create a user role by supplying the required account details.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RoleCreate"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Role"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/roles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change user settings
         * @description Update a role to change its display name, or to define a new login password. Users can only update roles they have write access to, i.e. their own.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description role ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RoleUpdate"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Role"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/roles/{id}/generate_api_key": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset API key
         * @description Reset the role’s API key. This will invalidate the current API key and generate a new one.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description role ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Role"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List groups
         * @description Get the list of groups the user belongs to. Groups are used for authorization.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            results?: components["schemas"]["Role"][];
                        } & components["schemas"]["QueryResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/collections/{collection_id}/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get permissions for a collection
         * @description Get the list of all permissions for the collection with id `collection_id`
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    collection_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            results?: components["schemas"]["Permission"][];
                        } & components["schemas"]["QueryResponse"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Update permissions for a collection
         * @description Update permissions for the collection with id `collection_id`
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    collection_id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["PermissionUpdateList"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            results?: components["schemas"]["Permission"][];
                        } & components["schemas"]["QueryResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/collections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List collections
         * @description Returns a list of collections matching a given query. Returns all the collections accessible by a user if no query is given.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CollectionsResponse"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a collection
         * @description Create a collection with the given metadata
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CollectionCreate"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Collection"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/collections/{collection_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a collection
         * @description Return the collection with id `collection_id`
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The collection ID. */
                    collection_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CollectionDeep"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Update a collection
         * @description Change collection metadata and update statistics.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The collection ID. */
                    collection_id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CollectionUpdate"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Collection"];
                    };
                };
            };
        };
        /**
         * Delete a collection
         * @description Delete the collection with id `collection_id`
         */
        delete: {
            parameters: {
                query?: {
                    /** @description Wait for delete to finish in backend. */
                    sync?: boolean;
                    /** @description Delete only the contents, but not the collection itself. */
                    keep_metadata?: boolean;
                };
                header?: never;
                path: {
                    /** @description The collection ID. */
                    collection_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/collections/{collection_id}/reingest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Re-ingest a collection
         * @description Trigger a process to re-parse the content of all documents stored in the collection with id `collection_id`.
         *
         */
        post: {
            parameters: {
                query?: {
                    /** @description Index documents while they're being processed. */
                    index?: boolean;
                };
                header?: never;
                path: {
                    /** @description The collection ID. */
                    collection_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Accepted */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/collections/{collection_id}/reindex": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Re-index a collection
         * @description Re-index the entities in the collection with id `collection_id`
         *
         */
        post: {
            parameters: {
                query?: {
                    /** @description Delete the index before re-generating it. */
                    flush?: boolean;
                };
                header?: never;
                path: {
                    /** @description The collection ID. */
                    collection_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Accepted */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/collections/{collection_id}/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Load entities into a collection
         * @description Bulk load entities into the collection with id `collection_id`
         *
         */
        post: {
            parameters: {
                query?: {
                    /** @description safe=True means that the data cannot be trusted and that file checksums should be removed. Flag is only available for admins. Default True. */
                    safe?: boolean;
                    /** @description clean=True means that the data cannot be trusted and that the data should be cleaned from invalid values. Flag is only available for admins. Default True. */
                    clean?: boolean;
                };
                header?: never;
                path: {
                    /** @description The collection ID. */
                    collection_id: number;
                };
                cookie?: never;
            };
            /** @description Entities to be loaded. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EntityUpdate"][];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/collections/{collection_id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check processing status of a collection
         * @description Return the task queue status for the collection with id `collection_id`
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The collection ID. */
                    collection_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CollectionStatus"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Cancel processing of a collection
         * @description Cancel all queued tasks for the collection with id `collection_id`
         *
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The collection ID. */
                    collection_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CollectionStatus"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/collections/{collection_id}/touch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Touch a collection
         * @description Set the timestamp for the most recent change to the data in collection `collection_id`.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The collection ID. */
                    collection_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Accepted */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/entities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search entities
         * @description Returns a list of entities matching the given search criteria.
         *     A filter can be applied to show only results from a particular collection: `?filter:collection_id={collection_id}`.
         *     If you know you only want to search documents (unstructured, ingested data) or entities (structured data which may have been extracted from a dataset, or entered by a human) you can use these arguments with the `/documents` or `/entities` endpoints.
         *
         */
        get: {
            parameters: {
                query?: {
                    /** @description A query string in ElasticSearch query syntax. Can include field searches, such as `title:penguin` */
                    q?: string;
                    /** @description Return facet values for the given metadata field, such as `languages`, `countries`, `mime_type` or `extension`. This can be specified multiple times for more than one facet to be added. */
                    facet?: string;
                    /** @description Filter the results by the given field. This is useful when used in conjunction with facet to create a drill-down mechanism. Useful fields are:
                     *     - `collection_id`, documents belonging to a particular collection.
                     *     - `title`, of the document.
                     *     - `file_name`, of the source file.
                     *     - `source_url`, URL of the source file.
                     *     - `extension`, file extension of the source file.
                     *     - `languages`, in the document.
                     *     - `countries`, associated with the document.
                     *     - `keywords`, from the document.
                     *     - `emails`, email addresses mentioned in the document.
                     *     - `domains`, websites mentioned in the document.
                     *     - `phones`, mentioned in the document.
                     *     - `dates`, in any of the following formats: yyyy-MM-dd, yyyy-MM, yyyy-MM-d, yyyy-M, yyyy
                     *     - `mime_type`, of the source file.
                     *     - `author`, according to the source file's metadata.
                     *     - `summary`, of the document.
                     *     - `text`, entire text extracted from the document.
                     *     - `created_at`, when the document was added to aleph (yyyy-mm -ddThh:ii:ss.uuuuuu).
                     *     - `updated_at`, when the document was modified in aleph (yyyy -mm-ddThh:ii:ss.uuuuuu).
                     *      */
                    "filter:{field_name}"?: string;
                    /** @description The number of results to return, max. 10,000. */
                    limit?: number;
                    /** @description The number of results to skip at the beginning of the result set.
                     *      */
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Resturns a list of entities in result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EntitiesResponse"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create an entity in a collection
         * @description Create an entity in a collection with a given schema and a set of given properties in the database. This is not the API you want to be using to load bulk data, but only for interactive entity manipulation in the UI. Always use the `bulk` API or for loading source datasets, no exceptions.
         */
        post: {
            parameters: {
                query?: {
                    /** @description Sign entity IDs referenced in nested properties. */
                    sign?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EntityCreate"];
                };
            };
            responses: {
                /** @description Resturns the created entity */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Entity"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/search/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Download the results of a search
         * @description Downloads all the results of a search as a zip archive; upto a max of 10,000 results. The returned file will contain an Excel document with structured data as well as the binary files from all matching documents.
         *     Supports the same query parameters as the search API.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Accepted */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/match": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Query for similar entities
         * @description Query for similar entities matching a given entity inside a given list of collections.
         */
        post: {
            parameters: {
                query?: {
                    collection_ids?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EntityUpdate"];
                };
            };
            responses: {
                /** @description Returns a list of entities in result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EntitiesResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/entities/{entity_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an entity
         * @description Return the entity with id `entity_id`
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    entity_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Entity"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Update an entity
         * @description Update the entity with id `entity_id`. This only applies to entities which are backed by a database row, i.e. not any entities resulting from a mapping or bulk load.
         *
         */
        post: {
            parameters: {
                query?: {
                    /** @description Sign entity IDs referenced in nested properties. */
                    sign?: boolean;
                };
                header?: never;
                path: {
                    entity_id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EntityUpdate"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Entity"];
                    };
                };
            };
        };
        /**
         * Delete an entity
         * @description Delete the entity with id `entity_id`
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    entity_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/entities/{entity_id}/similar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get similar entities
         * @description Get a list of similar entities to the entity with id `entity_id`
         *
         */
        get: {
            parameters: {
                query?: {
                    "filter:schema"?: string[];
                    "filter:schemata"?: string[];
                };
                header?: never;
                path: {
                    entity_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns a list of scored and judged entities */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SimilarResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/entities/{entity_id}/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get entity tags
         * @description Get tags for the entity with id `entity_id`.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    entity_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            results?: components["schemas"]["EntityTag"][];
                        } & components["schemas"]["QueryResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/entities/{entity_id}/expand": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Expand an entity to get its adjacent entities
         * @description Get the property-wise list of entities adjacent to the entity with id `entity_id`.
         */
        get: {
            parameters: {
                query?: {
                    /** @description properties to filter on */
                    "filter:property"?: string;
                    /** @description number of entities to return per property */
                    limit?: number;
                };
                header?: never;
                path: {
                    entity_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            results?: components["schemas"]["EntityExpand"][];
                        } & components["schemas"]["QueryResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/entities/{entity_id}/entitysets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Shows EntitySets which reference the given entity
         * @description Search for all entitysets which reference the given entity. The entity sets can be filtered based on it's collection id, label, type or the judgement of the entity within the set.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Restrict to a EntitySets of a particular type */
                    "filter:type"?: string[];
                    /** @description Restrict to a EntitySets with a particular label */
                    "filter:label"?: string[];
                    /** @description Restrict to a specific profile judgement */
                    "filter:judgement"?: string[];
                    /** @description Restrict to entity sets within particular collections */
                    "filter:collection_id"?: string[];
                };
                header?: never;
                path: {
                    entity_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EntitySet"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/profiles/{profile_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a profile
         * @description Get a profile with constituent items and the merged pseudo entity.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    profile_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Profile"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/profiles/{profile_id}/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get profile tags
         * @description Get tags for the profile with id `profile_id`.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    profile_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            results?: components["schemas"]["EntityTag"][];
                        } & components["schemas"]["QueryResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/profiles/{profile_id}/similar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get similar entities
         * @description Get a list of similar entities to the profile with id `profile_id`
         *
         */
        get: {
            parameters: {
                query?: {
                    "filter:schema"?: string[];
                    "filter:schemata"?: string[];
                };
                header?: never;
                path: {
                    profile_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns a list of entities */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EntitiesResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/profiles/{profile_id}/expand": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Expand the profile to get its adjacent entities
         * @description Get the property-wise list of entities adjacent to the entities that are part of the profile `profile_id`.
         */
        get: {
            parameters: {
                query?: {
                    /** @description properties to filter on */
                    "filter:property"?: string;
                    /** @description number of entities to return per property */
                    limit?: number;
                };
                header?: never;
                path: {
                    profile_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            results?: components["schemas"]["EntityExpand"][];
                        } & components["schemas"]["QueryResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/profiles/_pairwise": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Make a pairwise judgement between an entity and a match.
         * @description This lets a user decide if they think a given xref match is a true or false match. Implicitly, this might create or alter a profile in the collection used by
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Pairwise"];
                };
            };
            responses: {
                /** @description Accepted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description accepted */
                            status?: string;
                            /** @description profile_id for `entity`. */
                            profile_id?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/alerts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List alerts */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            results?: components["schemas"]["Alert"][];
                        } & components["schemas"]["QueryResponse"];
                    };
                };
            };
        };
        put?: never;
        /** Create an alert */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["AlertCreate"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Alert"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/alerts/{alert_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch an alert */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The alert ID.
                     * @example 2
                     */
                    alert_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Alert"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete an alert */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The alert ID.
                     * @example 2
                     */
                    alert_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/collections/{collection_id}/ingest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload a document to a collection
         * @description Upload a document to a collection with id `collection_id`
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    collection_id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "multipart/form-data": {
                        /**
                         * Format: binary
                         * @description The document to upload
                         */
                        file?: string;
                        meta?: components["schemas"]["DocumentIngest"];
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description id of the uploaded document */
                            id?: number;
                            status?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/collections/{collection_id}/reconcile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Freebase reconciliation API
         * @description An implementation of the reconciliation API from Freebase, used by OpenRefine to match entities.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The collection ID. */
                    collection_id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        query?: Record<string, unknown>;
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/freebase/suggest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/freebase/property": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/freebase/type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/notifications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get notifications
         * @description Get all the notifications for the user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            results?: components["schemas"]["Notification"][];
                        } & components["schemas"]["QueryResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/collections/{collection_id}/xref": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch cross-reference results
         * @description Fetch cross-reference matches for entities in the collection with id `collection_id`
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    collection_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            results?: components["schemas"]["XrefResponse"][];
                        } & components["schemas"]["QueryResponse"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Generate cross-reference matches
         * @description Generate cross-reference matches for entities in a collection.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    collection_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Accepted */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description accepted */
                            status?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/collections/{collection_id}/xref.xlsx": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Download cross-reference results
         * @description Download results of cross-referencing as an Excel file
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    collection_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Accepted */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/collections/{collection_id}/_stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stream collection entities.
         * @description Stream a JSON form of each entity in the given collection, or throughout the entire database.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The collection ID. */
                    collection_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/x-ndjson": components["schemas"]["Entity"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/archive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download a blob from the archive */
        get: {
            parameters: {
                query?: {
                    /** @description Authorization token for an archive blob */
                    claim?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "*/*": unknown;
                    };
                };
                /** @description Object does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an overview of collections and exports being processed
         * @description List collections being processed currently and pending task counts
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SystemStatusResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/collections/{collection_id}/mappings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List mappings */
        get: {
            parameters: {
                query?: {
                    /** @description The table id. */
                    table?: string;
                };
                header?: never;
                path: {
                    /** @description The collection id. */
                    collection_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            results?: components["schemas"]["Mapping"][];
                        } & components["schemas"]["QueryResponse"];
                    };
                };
            };
        };
        put?: never;
        /** Create a mapping */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The collection id.
                     * @example 2
                     */
                    collection_id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["MappingCreate"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Mapping"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/collections/{collection_id}/mappings/{mapping_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a mapping */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The collection id.
                     * @example 2
                     */
                    collection_id: number;
                    /**
                     * @description The mapping id.
                     * @example 2
                     */
                    mapping_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Mapping"];
                    };
                };
            };
        };
        put?: never;
        /** Update a mapping */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The collection id.
                     * @example 2
                     */
                    collection_id: number;
                    /**
                     * @description The mapping id.
                     * @example 2
                     */
                    mapping_id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["MappingCreate"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Mapping"];
                    };
                };
            };
        };
        /** Delete a mapping */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The collection id.
                     * @example 2
                     */
                    collection_id: number;
                    /**
                     * @description The mapping id.
                     * @example 2
                     */
                    mapping_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/collections/{collection_id}/mappings/{mapping_id}/trigger": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Load entities from a mapping */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The collection id.
                     * @example 2
                     */
                    collection_id: number;
                    /**
                     * @description The mapping id.
                     * @example 2
                     */
                    mapping_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/collections/{collection_id}/mappings/{mapping_id}/flush": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Flush entities loaded by a mapping */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The collection id.
                     * @example 2
                     */
                    collection_id: number;
                    /**
                     * @description The mapping id.
                     * @example 2
                     */
                    mapping_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/entitysets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List entitysets */
        get: {
            parameters: {
                query: {
                    /** @description The collection ID. */
                    "filter:collection_id": number;
                    /** @description The type of the entity set */
                    "filter:type"?: string;
                    /** @description Quert string for searches */
                    prefix?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            results?: components["schemas"]["EntitySet"][];
                        } & components["schemas"]["QueryResponse"];
                    };
                };
            };
        };
        put?: never;
        /** Create an entityset */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EntitySetCreate"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EntitySet"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/entitysets/{entityset_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch an entityset */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The entityset id.
                     * @example 3a0d91ece2dce88ad3259594c7b642485235a048
                     */
                    entityset_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EntitySet"];
                    };
                };
            };
        };
        put?: never;
        /** Update an entityset */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The entityset ID.
                     * @example 3a0d91ece2dce88ad3259594c7b642485235a048
                     */
                    entityset_id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EntitySetUpdate"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EntitySet"];
                    };
                };
            };
        };
        /** Delete an entity set */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The entity set ID.
                     * @example 3a0d91ece2dce88ad3259594c7b642485235a048
                     */
                    entityset_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/entitysets/{entityset_id}/entities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search entities in the entity set with id `entityset_id`
         * @description Supports all query filters and arguments present in the normal entity search API, but all resulting entities will be members of the set.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The entityset id.
                     * @example 3a0d91ece2dce88ad3259594c7b642485235a048
                     */
                    entityset_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Resturns a list of entities in result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EntitiesResponse"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Update an entity and add it to the entity set.
         * @description Update the entity with id `entity_id`. If it does not exist it will be created. If the user cannot edit the given entity, it is merely added to the entity set. New entities are always created in the collection of the entity set.
         *     Aside from these idiosyncracies, this is the same as `/api/2/entities/<id>`, but handles entity set membership transparently.
         *
         */
        post: {
            parameters: {
                query?: {
                    /** @description Sign entity IDs referenced in nested properties. */
                    sign?: boolean;
                };
                header?: never;
                path: {
                    /**
                     * @description The entityset id.
                     * @example 3a0d91ece2dce88ad3259594c7b642485235a048
                     */
                    entityset_id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EntityUpdate"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Entity"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/entitysets/{entityset_id}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add item to an entityset */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The entityset id.
                     * @example 3a0d91ece2dce88ad3259594c7b642485235a048
                     */
                    entityset_id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EntitySetItemUpdate"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EntitySetItem"];
                    };
                };
                /** @description Item removed */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/exports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List exports */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            results?: components["schemas"]["Export"][];
                        } & components["schemas"]["QueryResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/bookmarks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get bookmarks */
        get: {
            parameters: {
                query?: {
                    /** @description Number of bookmarks to return */
                    limit?: number;
                    /** @description Number of bookmarks to skip */
                    offset?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BookmarksResponse"];
                    };
                };
            };
        };
        put?: never;
        /** Create bookmark */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["BookmarkCreate"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Bookmark"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/2/bookmarks/{entity_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete bookmark */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the bookmarked entitiy */
                    entity_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        RoleCodeCreate: {
            /**
             * Format: email
             * @example user@example.org
             */
            email: string;
        };
        RoleCreate: {
            /** @example Example User */
            name?: string;
            password: string;
            /** @description Token received from email confirmation. */
            code: string;
        };
        RoleUpdate: {
            name?: string;
            /** @example false */
            is_muted?: boolean;
            /** @example false */
            is_tester?: boolean;
            password?: string;
            current_password?: string;
            /**
             * Format: locale
             * @example en
             */
            locale?: string | null;
        };
        Role: {
            name?: string;
            label?: string;
            readonly api_key?: string;
            /**
             * Format: email
             * @example user@example.org
             */
            readonly email?: string;
            readonly has_password?: boolean;
            readonly is_admin?: boolean;
            is_muted?: boolean;
            links?: Record<string, unknown>;
            /** Format: locale */
            locale?: string | null;
            /** @enum {string} */
            readonly type?: "user" | "group" | "system";
            /** @example true */
            readonly writeable?: boolean;
        } & components["schemas"]["DatedModel"];
        AlertCreate: {
            /**
             * @description Query string for the alert
             * @example putin
             */
            query: string;
        };
        Alert: {
            readonly normalized?: string;
            writeable?: boolean;
            links?: {
                self?: string;
            };
        } & components["schemas"]["DatedModel"];
        Xref: {
            collection_id?: string;
            entity?: components["schemas"]["Entity"];
            match?: components["schemas"]["Entity"];
            match_collection?: components["schemas"]["Collection"];
            /**
             * Format: schema
             * @example Person
             */
            schema?: string;
            countries?: string[];
            score?: number;
            judgement?: string & components["schemas"]["Judgement"];
        } & components["schemas"]["DatedModel"];
        XrefResponse: {
            links?: {
                export?: string;
            };
            results?: components["schemas"]["Xref"][];
        } & components["schemas"]["QueryResponse"];
        DocumentIngest: {
            /** @example John Doe */
            author?: string | null;
            /** Format: ftm-date */
            authored_at?: string | null;
            countries?: string[];
            crawler?: string | null;
            /** Format: ftm-date */
            date?: string | null;
            /** @example Example.pdf */
            file_name?: string | null;
            foreign_id?: string | null;
            generator?: string | null;
            keywords?: string[];
            languages?: string[];
            mime_type?: string | null;
            /** Format: ftm-date */
            modified_at?: string | null;
            parent_id?: string | null;
            parent?: components["schemas"]["Entity"];
            publisher?: string | null;
            /** Format: ftm-date */
            published_at?: string | null;
            /** Format: ftm-date */
            retrieved_at?: string | null;
            /** Format: ftm-url */
            source_url?: string | null;
            summary?: string | null;
            /** @example Example document title */
            title?: string | null;
        };
        Login: {
            /**
             * Format: email
             * @example user@example.org
             */
            email: string;
            password: string;
        };
        SystemStatusResponse: {
            total?: number;
            results?: ({
                id?: string;
                collection?: components["schemas"]["Collection"];
            } & components["schemas"]["CollectionStatus"])[];
        };
        Notification: {
            /** @description Role ID of the user initiating the event. */
            actor_id?: number;
            event?: {
                name?: string;
                params?: Record<string, unknown>;
                templates?: string;
            };
            params?: Record<string, unknown>;
        } & components["schemas"]["DatedModel"];
        EntitiesResponse: {
            links?: {
                export?: string;
            };
            results?: components["schemas"]["Entity"][];
        } & components["schemas"]["QueryResponse"];
        Entity: {
            collection?: components["schemas"]["Collection"];
            countries?: string[];
            dates?: string[];
            highlight?: string[];
            links?: {
                /** Format: ftm-url */
                tags?: string;
                /** Format: ftm-url */
                csv?: string | null;
                /** Format: ftm-url */
                file?: string | null;
                /** Format: ftm-url */
                pdf?: string | null;
                /** Format: ftm-url */
                reference?: string;
                /** Format: ftm-url */
                self?: string;
                /** Format: ftm-url */
                ui?: string;
            };
            name?: string;
            properties?: Record<string, unknown>;
            /**
             * Format: schema
             * @example Person
             */
            schema?: string;
            schemata?: string[];
            score?: number;
            /** @example false */
            writeable?: boolean;
            bookmarked?: boolean;
        } & components["schemas"]["DatedModel"];
        EntityUpdate: {
            id?: string;
            collection_id?: string | null;
            /** Format: schema */
            schema: string;
            properties?: Record<string, unknown>;
        };
        EntityCreate: {
            collection_id?: string;
            collection?: components["schemas"]["Collection"];
            foreign_id?: string;
        } & components["schemas"]["EntityUpdate"];
        EntityTag: {
            /** @description query string for this tag */
            id?: string;
            /** @example countries */
            field?: string;
            /** @example de */
            value?: string;
            /** @example 1 */
            count?: number;
        };
        EntityExpand: {
            property?: string;
            count?: number;
            entities?: components["schemas"]["Entity"][];
        };
        Similar: {
            judgement?: string & components["schemas"]["Judgement"];
            score?: number;
            entity?: Record<string, unknown>;
        };
        SimilarResponse: {
            results?: components["schemas"]["Similar"][];
        } & components["schemas"]["QueryResponse"];
        Permission: {
            read?: boolean;
            write?: boolean;
            role?: components["schemas"]["Role"];
        } & components["schemas"]["DatedModel"];
        PermissionUpdate: {
            write: boolean;
            read: boolean;
            role_id?: string;
            email?: string;
            role?: components["schemas"]["Role"];
        };
        PermissionUpdateList: components["schemas"]["PermissionUpdate"][];
        QueryResponse: {
            /** @example 30 */
            limit?: number;
            /**
             * Format: ftm-url
             * @description URL of the next set of results or null
             */
            next?: string | null;
            /** @example 0 */
            offset?: number;
            /**
             * @description Current page number
             * @example 1
             */
            page?: number;
            /**
             * @description Total number of pages
             * @example 42
             */
            pages?: number;
            /**
             * Format: ftm-url
             * @description URL of the previous set of results or null
             */
            previous?: string | null;
            /**
             * @description ok
             * @example ok
             */
            status?: string;
            /** @example 9999 */
            total?: number;
            /** @example eq */
            total_type?: string;
        };
        DatedModel: {
            readonly id?: string;
            /** Format: ftm-date */
            readonly created_at?: string;
            /** Format: ftm-date */
            readonly updated_at?: string;
        };
        MappingCreate: {
            table_id: string;
            entityset_id?: string | null;
            entityset?: components["schemas"]["DatedModel"];
            mapping_query: Record<string, unknown>;
        };
        Mapping: {
            collection_id?: string;
            role_id?: string;
            table_id?: string;
            entityset?: components["schemas"]["EntitySet"];
            readonly last_run_err_msg?: string | null;
            readonly last_run_status?: string | null;
            query?: Record<string, unknown>;
            links?: {
                table_csv?: string;
            };
        } & components["schemas"]["DatedModel"];
        EntitySetBase: {
            label?: string;
            summary?: string | null;
            /** Format: entitysettype */
            type?: string;
            layout?: components["schemas"]["DiagramLayout"];
        };
        EntitySetUpdate: components["schemas"]["EntitySetBase"];
        EntitySetCreate: {
            collection_id: string;
            entities?: ({
                /** Format: entity-id */
                id: string;
            } & WithRequired<components["schemas"]["EntityUpdate"], "id" | "schema" | "properties">)[];
        } & WithRequired<components["schemas"]["EntitySetBase"], "label" | "type">;
        EntitySet: {
            collection: components["schemas"]["Collection"];
            readonly role_id: string;
            readonly writeable: boolean;
        } & (components["schemas"]["DatedModel"] & WithRequired<components["schemas"]["EntitySetBase"], "label" | "type">);
        /** @enum {string} */
        Judgement: "positive" | "negative" | "unsure" | "no_judgement";
        EntitySetItemUpdate: {
            entity_id?: string;
            entity?: components["schemas"]["Entity"];
            compared_to_entity_id?: string;
            judgement?: string & components["schemas"]["Judgement"];
        };
        EntitySetItem: {
            entityset_id: string;
            collection_id?: string;
            entity: components["schemas"]["Entity"];
            compared_to_entity_id?: string;
            judgement?: string & components["schemas"]["Judgement"];
        } & components["schemas"]["DatedModel"];
        EntitySetItemResponse: {
            links?: {
                export?: string;
            };
            results?: components["schemas"]["EntitySetItem"][];
        } & components["schemas"]["QueryResponse"];
        Export: {
            readonly label?: string;
            readonly operation?: string;
            readonly creator_id?: string;
            readonly collection_id?: string;
            readonly expires_at?: string;
            readonly deleted?: boolean;
            readonly status?: string;
            readonly file_name?: string;
            readonly file_size?: number;
            readonly meta?: Record<string, unknown>;
        } & components["schemas"]["DatedModel"];
        BookmarksResponse: {
            results?: components["schemas"]["Bookmark"][];
        } & components["schemas"]["QueryResponse"];
        Bookmark: {
            /** Format: date-time */
            created_at?: string;
            entity?: components["schemas"]["Entity"];
        };
        BookmarkCreate: {
            /** Format: entity-id */
            entity_id: string;
        };
        Collection: {
            casefile?: boolean;
            /** Format: category */
            category?: string;
            /** Format: frequency */
            frequency?: string;
            count?: number;
            countries?: string[];
            creator?: components["schemas"]["Role"];
            /** Format: ftm-date */
            readonly data_updated_at?: string;
            foreign_id?: string;
            label?: string;
            links?: {
                reconcile?: string;
                self?: string;
                ui?: string;
                xref?: string;
                xref_export?: string;
            };
            secret?: boolean;
            restricted?: boolean;
            xref?: boolean;
            writeable?: boolean;
        } & components["schemas"]["DatedModel"];
        CollectionCreate: {
            label: string;
            summary?: string | null;
            countries?: string[];
            languages?: string[];
            /** Format: ftm-url */
            data_url?: string | null;
            foreign_id?: string;
            /** Format: ftm-url */
            info_url?: string | null;
            publisher?: string | null;
            /** Format: ftm-url */
            publisher_url?: string | null;
            /** Format: category */
            category?: string;
            /** Format: frequency */
            frequency?: string;
            restricted?: boolean;
            xref?: boolean;
        };
        CollectionUpdate: {
            creator_id?: string | null;
            creator?: components["schemas"]["Role"];
        } & components["schemas"]["CollectionCreate"];
        StatusCounts: {
            finished?: number;
            pending?: number;
            running?: number;
        };
        CollectionStatus: {
            jobs?: ({
                stages?: ({
                    job_id?: string;
                    stage?: string;
                } & components["schemas"]["StatusCounts"])[];
            } & components["schemas"]["StatusCounts"])[];
        } & components["schemas"]["StatusCounts"];
        CollectionDeep: {
            status?: components["schemas"]["CollectionStatus"];
            statistics?: {
                schema?: Record<string, unknown>;
                names?: Record<string, unknown>;
                addresses?: Record<string, unknown>;
                countries?: Record<string, unknown>;
                languages?: Record<string, unknown>;
                phones?: Record<string, unknown>;
                emails?: Record<string, unknown>;
                ibans?: Record<string, unknown>;
            };
        } & components["schemas"]["Collection"];
        CollectionsResponse: {
            facets?: Record<string, unknown>;
            results?: components["schemas"]["Collection"][];
        } & components["schemas"]["QueryResponse"];
        DiagramVertex: {
            id?: string;
            type?: string;
            label?: string;
            fixed?: boolean;
            hidden?: boolean;
            color?: string;
            position?: {
                x?: number;
                y?: number;
            };
            entityId?: string;
        };
        DiagramEdge: {
            id?: string;
            type?: string;
            label?: string;
            sourceId?: string;
            targetId?: string;
            entityId?: string;
            propertyQName?: string;
            labelPosition?: {
                x?: number;
                y?: number;
            };
        };
        DiagramGrouping: {
            id?: string;
            label?: string;
            color?: string;
            vertices?: string[];
        };
        DiagramLayout: {
            vertices: components["schemas"]["DiagramVertex"][];
            edges: components["schemas"]["DiagramEdge"][];
            groupings?: components["schemas"]["DiagramGrouping"][];
            settings?: {
                pivotTypes?: string[];
            };
        };
        Profile: {
            items?: components["schemas"]["EntitySetItem"][];
            merged?: components["schemas"]["Entity"];
        } & components["schemas"]["EntitySet"];
        Pairwise: {
            entity_id: string;
            match_id: string;
            judgement: components["schemas"]["Judgement"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
type WithRequired<T, K extends keyof T> = T & {
    [P in K]-?: T[P];
};
export type operations = Record<string, never>;
